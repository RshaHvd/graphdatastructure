package hvd.edu.benchmark.jmh.find.edges.nodes10m

import java.util.concurrent.TimeUnit

import hvd.edu.benchmark.workload.GraphTypes._
import org.openjdk.jmh.annotations._

object FindEdgesBenchmark10MNodes10MEdges {

  //  def genRandom() = {
  //    val randomNodesSet = mutable.Set[Int]()
  //    val random = Random
  //
  //    while (randomNodesSet.size < 100) {
  //      randomNodesSet.add(random.nextInt(10000001))
  //    }
  //    println(s"Random Nodes are ${randomNodesSet.mkString(",")}")
  //    randomNodesSet.toList
  //  }
  //
  @State(Scope.Thread)
  @BenchmarkMode(Array(Mode.AverageTime))
  @OutputTimeUnit(TimeUnit.MILLISECONDS)
  class FindEdgesALArray10M10MBenchmark {

    val graph = ALArrayType.readG("generated/generated10000k/generated10000000_10000000.txt", "\\t", 14999265)

    val randomNodes = List(2777282, 1311922, 7944809, 728975, 3780598, 3084052, 4357353, 672035, 8371574, 3149248,
      7484445, 2454778, 2587609, 9533835, 202, 7332046, 3572088, 7845086, 11933,
      2252487, 2432335, 9440475, 5097934, 1411192, 5807083, 5729068, 1340256, 934906, 7076632,
      5820086, 2869440, 5354115, 9812624, 2724343, 4324733, 8847740, 2219869, 5770515, 4914743,
      3984522, 838689, 8100, 7778454, 9547461, 6989816, 6760547, 8099924, 4573772, 9129685, 849791,
      5971382, 5553989, 3182240, 299904, 6061434, 8121799, 1680324, 6615192, 8036511, 8021418, 3419184,
      9040793, 4288030, 2292644, 2747095, 8278856, 7251019, 3815252, 3385947, 9634203, 7490545, 5350272,
      5392760, 1019206, 6050093, 6277482, 4771972, 8160025, 2089889, 3725667, 3572868, 8706531, 8305472,
      6385407, 1557119, 8745927, 8139910, 8322002,
      5613663, 7621521, 5066714, 9013091, 5572533, 6570833, 7142522, 4068766, 8987962, 8147639, 3728293, 5950141)

    @Benchmark
    def findInGraph1() = {
      for (nid <- randomNodes) {
        graph.edgesForVertexId(nid)
      }
    }
  }

  @State(Scope.Thread)
  @BenchmarkMode(Array(Mode.AverageTime))
  @OutputTimeUnit(TimeUnit.MILLISECONDS)
  class FindEdgesALMap10M10MBenchmark {
    val graph = ALMapType.readG("generated/generated10000k/generated10000000_10000000.txt", "\\t", 14999265)

    val randomNodes = List(2777282, 1311922, 7944809, 728975, 3780598, 3084052, 4357353, 672035, 8371574, 3149248,
      7484445, 2454778, 2587609, 9533835, 202, 7332046, 3572088, 7845086, 11933,
      2252487, 2432335, 9440475, 5097934, 1411192, 5807083, 5729068, 1340256, 934906, 7076632,
      5820086, 2869440, 5354115, 9812624, 2724343, 4324733, 8847740, 2219869, 5770515, 4914743,
      3984522, 838689, 8100, 7778454, 9547461, 6989816, 6760547, 8099924, 4573772, 9129685, 849791,
      5971382, 5553989, 3182240, 299904, 6061434, 8121799, 1680324, 6615192, 8036511, 8021418, 3419184,
      9040793, 4288030, 2292644, 2747095, 8278856, 7251019, 3815252, 3385947, 9634203, 7490545, 5350272,
      5392760, 1019206, 6050093, 6277482, 4771972, 8160025, 2089889, 3725667, 3572868, 8706531, 8305472,
      6385407, 1557119, 8745927, 8139910, 8322002,
      5613663, 7621521, 5066714, 9013091, 5572533, 6570833, 7142522, 4068766, 8987962, 8147639, 3728293, 5950141)
    @Benchmark
    def findInGraph2() = {
      for (nid <- randomNodes) {
        graph.edgesForVertexId(nid)
      }
    }
  }

  @State(Scope.Thread)
  @BenchmarkMode(Array(Mode.AverageTime))
  @OutputTimeUnit(TimeUnit.MILLISECONDS)
  class FindEdgesALTree10M10MBenchmark {
    val graph = ALTreeType.readG("generated/generated10000k/generated10000000_10000000.txt", "\\t", 14999265)

    val randomNodes = List(2777282, 1311922, 7944809, 728975, 3780598, 3084052, 4357353, 672035, 8371574, 3149248,
      7484445, 2454778, 2587609, 9533835, 202, 7332046, 3572088, 7845086, 11933,
      2252487, 2432335, 9440475, 5097934, 1411192, 5807083, 5729068, 1340256, 934906, 7076632,
      5820086, 2869440, 5354115, 9812624, 2724343, 4324733, 8847740, 2219869, 5770515, 4914743,
      3984522, 838689, 8100, 7778454, 9547461, 6989816, 6760547, 8099924, 4573772, 9129685, 849791,
      5971382, 5553989, 3182240, 299904, 6061434, 8121799, 1680324, 6615192, 8036511, 8021418, 3419184,
      9040793, 4288030, 2292644, 2747095, 8278856, 7251019, 3815252, 3385947, 9634203, 7490545, 5350272,
      5392760, 1019206, 6050093, 6277482, 4771972, 8160025, 2089889, 3725667, 3572868, 8706531, 8305472,
      6385407, 1557119, 8745927, 8139910, 8322002,
      5613663, 7621521, 5066714, 9013091, 5572533, 6570833, 7142522, 4068766, 8987962, 8147639, 3728293, 5950141)

    @Benchmark
    def findInGraph3() = {
      for (nid <- randomNodes) {
        graph.edgesForVertexId(nid)
      }
    }
  }

  @State(Scope.Thread)
  @BenchmarkMode(Array(Mode.AverageTime))
  @OutputTimeUnit(TimeUnit.MILLISECONDS)
  class FindEdgesCSRArray10M10MBenchmark {
    val graph = CSRArrayType.readG("generated/generated10000k/generated10000000_10000000.txt", "\\t", 14999265)

    val randomNodes = List(2777282, 1311922, 7944809, 728975, 3780598, 3084052, 4357353, 672035, 8371574, 3149248,
      7484445, 2454778, 2587609, 9533835, 202, 7332046, 3572088, 7845086, 11933,
      2252487, 2432335, 9440475, 5097934, 1411192, 5807083, 5729068, 1340256, 934906, 7076632,
      5820086, 2869440, 5354115, 9812624, 2724343, 4324733, 8847740, 2219869, 5770515, 4914743,
      3984522, 838689, 8100, 7778454, 9547461, 6989816, 6760547, 8099924, 4573772, 9129685, 849791,
      5971382, 5553989, 3182240, 299904, 6061434, 8121799, 1680324, 6615192, 8036511, 8021418, 3419184,
      9040793, 4288030, 2292644, 2747095, 8278856, 7251019, 3815252, 3385947, 9634203, 7490545, 5350272,
      5392760, 1019206, 6050093, 6277482, 4771972, 8160025, 2089889, 3725667, 3572868, 8706531, 8305472,
      6385407, 1557119, 8745927, 8139910, 8322002,
      5613663, 7621521, 5066714, 9013091, 5572533, 6570833, 7142522, 4068766, 8987962, 8147639, 3728293, 5950141)
    @Benchmark
    def findInGraph4() = {
      for (nid <- randomNodes) {
        graph.edgesForVertexId(nid)
      }
    }
  }

  @State(Scope.Thread)
  @BenchmarkMode(Array(Mode.AverageTime))
  @OutputTimeUnit(TimeUnit.MILLISECONDS)
  class FindEdgesCSRMap10M10MBenchmark {
    val graph = CSRMapType.readG("generated/generated10000k/generated10000000_10000000.txt", "\\t", 14999265)

    val randomNodes = List(2777282, 1311922, 7944809, 728975, 3780598, 3084052, 4357353, 672035, 8371574, 3149248,
      7484445, 2454778, 2587609, 9533835, 202, 7332046, 3572088, 7845086, 11933,
      2252487, 2432335, 9440475, 5097934, 1411192, 5807083, 5729068, 1340256, 934906, 7076632,
      5820086, 2869440, 5354115, 9812624, 2724343, 4324733, 8847740, 2219869, 5770515, 4914743,
      3984522, 838689, 8100, 7778454, 9547461, 6989816, 6760547, 8099924, 4573772, 9129685, 849791,
      5971382, 5553989, 3182240, 299904, 6061434, 8121799, 1680324, 6615192, 8036511, 8021418, 3419184,
      9040793, 4288030, 2292644, 2747095, 8278856, 7251019, 3815252, 3385947, 9634203, 7490545, 5350272,
      5392760, 1019206, 6050093, 6277482, 4771972, 8160025, 2089889, 3725667, 3572868, 8706531, 8305472,
      6385407, 1557119, 8745927, 8139910, 8322002,
      5613663, 7621521, 5066714, 9013091, 5572533, 6570833, 7142522, 4068766, 8987962, 8147639, 3728293, 5950141)

    @Benchmark
    def findInGraph5() = {
      for (nid <- randomNodes) {
        graph.edgesForVertexId(nid)
      }
    }
  }

  @State(Scope.Thread)
  @BenchmarkMode(Array(Mode.AverageTime))
  @OutputTimeUnit(TimeUnit.MILLISECONDS)
  class FindEdgesCSRTree10M10MBenchmark {
    val graph = CSRTreeType.readG("generated/generated10000k/generated10000000_10000000.txt", "\\t", 14999265)

    val randomNodes = List(2777282, 1311922, 7944809, 728975, 3780598, 3084052, 4357353, 672035, 8371574, 3149248,
      7484445, 2454778, 2587609, 9533835, 202, 7332046, 3572088, 7845086, 11933,
      2252487, 2432335, 9440475, 5097934, 1411192, 5807083, 5729068, 1340256, 934906, 7076632,
      5820086, 2869440, 5354115, 9812624, 2724343, 4324733, 8847740, 2219869, 5770515, 4914743,
      3984522, 838689, 8100, 7778454, 9547461, 6989816, 6760547, 8099924, 4573772, 9129685, 849791,
      5971382, 5553989, 3182240, 299904, 6061434, 8121799, 1680324, 6615192, 8036511, 8021418, 3419184,
      9040793, 4288030, 2292644, 2747095, 8278856, 7251019, 3815252, 3385947, 9634203, 7490545, 5350272,
      5392760, 1019206, 6050093, 6277482, 4771972, 8160025, 2089889, 3725667, 3572868, 8706531, 8305472,
      6385407, 1557119, 8745927, 8139910, 8322002,
      5613663, 7621521, 5066714, 9013091, 5572533, 6570833, 7142522, 4068766, 8987962, 8147639, 3728293, 5950141)

    @Benchmark
    def findInGraph6() = {
      for (nid <- randomNodes) {
        graph.edgesForVertexId(nid)
      }
      //      val mString = m.map {
      //        case (k, v) => s"${k} = ${v.map(_.id).mkString(",")};"
      //      }
      //      //println(s"Graph6 found  = ${mString}")
      //      val f = new File(s"findInGraph6.txt")
      //      val printStream = new PrintWriter(f, "UTF-8")
      //      try {
      //        printStream.print(mString)
      //      }
      //      finally {
      //        printStream.flush()
      //        printStream.close()
      //      }
    }
  }

}
