package hvd.edu.benchmark.jmh.find.edges.realdata

import java.util.concurrent.TimeUnit

import hvd.edu.benchmark.workload.GraphTypes._
import org.openjdk.jmh.annotations._

object FindEdgesBenchmarkRealDataAmazon {

  //  def randomNodes = {
  //    val randomNodesSet = mutable.Set[Int]()
  //    val random = Random
  //
  //    while (randomNodesSet.size < 100) {
  //      val nextInt = random.nextInt(403395)
  //      if (graph.findVertexById(nextInt).nonEmpty) {
  //        randomNodesSet.add(nextInt)
  //      }
  //    }
  //    println(s"Random Nodes are ${randomNodesSet.mkString(",")}")
  //    randomNodesSet.toList
  //  }

  @State(Scope.Thread)
  @BenchmarkMode(Array(Mode.AverageTime))
  @OutputTimeUnit(TimeUnit.MILLISECONDS)
  class FindEdgesALArrayAmazon {

    val graph = ALArrayType.readG("realdata/amazon0601.txt", "\\t", 3387392)

    val randomNodes = List(210940, 222098, 318973, 390521, 19551, 46446, 214411, 48226, 131686, 371249, 227972, 108566, 79333, 61635,
      109880, 301046, 347084, 97054, 346597, 184543, 290259, 205864, 286638, 56992, 308234, 134572, 120699, 55243,
      284250, 323167, 263489, 134137, 272005, 386528, 394005, 61292, 253212, 147700, 267535, 379626, 44379, 228191,
      335106, 32511, 197913, 358228, 70006, 350947, 218524, 178795, 107807, 174229, 319205, 347066, 325433, 112571,
      298734, 392140, 223790, 42541, 175445, 91092, 216671, 328317, 263319, 322387, 141138, 27248, 188702, 217885,
      370859, 269724, 266357, 194861, 225937, 384341, 280672, 186441, 37132, 331561, 394056, 91744, 16313, 86293,
      364265, 336825, 92806, 376781, 261221, 22595, 211198, 185015, 235640, 397492, 352820, 315479, 72999, 305818,
      216543, 168146)

    @Benchmark
    def findInGraph1() = {
      for (nid <- randomNodes) {
        nid -> graph.edgesForVertexId(nid)
      }
    }
  }

  @State(Scope.Thread)
  @BenchmarkMode(Array(Mode.AverageTime))
  @OutputTimeUnit(TimeUnit.MILLISECONDS)
  class FindEdgesALMapAmazon {
    val graph = ALMapType.readG("realdata/amazon0601.txt", "\\t", 3387392)

    val randomNodes = List(210940, 222098, 318973, 390521, 19551, 46446, 214411, 48226, 131686, 371249, 227972, 108566, 79333, 61635,
      109880, 301046, 347084, 97054, 346597, 184543, 290259, 205864, 286638, 56992, 308234, 134572, 120699, 55243,
      284250, 323167, 263489, 134137, 272005, 386528, 394005, 61292, 253212, 147700, 267535, 379626, 44379, 228191,
      335106, 32511, 197913, 358228, 70006, 350947, 218524, 178795, 107807, 174229, 319205, 347066, 325433, 112571,
      298734, 392140, 223790, 42541, 175445, 91092, 216671, 328317, 263319, 322387, 141138, 27248, 188702, 217885,
      370859, 269724, 266357, 194861, 225937, 384341, 280672, 186441, 37132, 331561, 394056, 91744, 16313, 86293,
      364265, 336825, 92806, 376781, 261221, 22595, 211198, 185015, 235640, 397492, 352820, 315479, 72999, 305818,
      216543, 168146)

    @Benchmark
    def findInGraph2() = {
      for (nid <- randomNodes) {
        nid -> graph.edgesForVertexId(nid)
      }
    }
  }

  @State(Scope.Thread)
  @BenchmarkMode(Array(Mode.AverageTime))
  @OutputTimeUnit(TimeUnit.MILLISECONDS)
  class FindEdgesALTreeAmazon {
    val graph = ALTreeType.readG("realdata/amazon0601.txt", "\\t", 3387392)

    val randomNodes = List(210940, 222098, 318973, 390521, 19551, 46446, 214411, 48226, 131686, 371249, 227972, 108566, 79333, 61635,
      109880, 301046, 347084, 97054, 346597, 184543, 290259, 205864, 286638, 56992, 308234, 134572, 120699, 55243,
      284250, 323167, 263489, 134137, 272005, 386528, 394005, 61292, 253212, 147700, 267535, 379626, 44379, 228191,
      335106, 32511, 197913, 358228, 70006, 350947, 218524, 178795, 107807, 174229, 319205, 347066, 325433, 112571,
      298734, 392140, 223790, 42541, 175445, 91092, 216671, 328317, 263319, 322387, 141138, 27248, 188702, 217885,
      370859, 269724, 266357, 194861, 225937, 384341, 280672, 186441, 37132, 331561, 394056, 91744, 16313, 86293,
      364265, 336825, 92806, 376781, 261221, 22595, 211198, 185015, 235640, 397492, 352820, 315479, 72999, 305818,
      216543, 168146)

    @Benchmark
    def findInGraph3() = {
      for (nid <- randomNodes) {
        nid -> graph.edgesForVertexId(nid)
      }
    }
  }

  @State(Scope.Thread)
  @BenchmarkMode(Array(Mode.AverageTime))
  @OutputTimeUnit(TimeUnit.MILLISECONDS)
  class FindEdgesCSRArrayAmazon {
    val graph = CSRArrayType.readG("realdata/amazon0601.txt", "\\t", 3387392)

    val randomNodes = List(210940, 222098, 318973, 390521, 19551, 46446, 214411, 48226, 131686, 371249, 227972, 108566, 79333, 61635,
      109880, 301046, 347084, 97054, 346597, 184543, 290259, 205864, 286638, 56992, 308234, 134572, 120699, 55243,
      284250, 323167, 263489, 134137, 272005, 386528, 394005, 61292, 253212, 147700, 267535, 379626, 44379, 228191,
      335106, 32511, 197913, 358228, 70006, 350947, 218524, 178795, 107807, 174229, 319205, 347066, 325433, 112571,
      298734, 392140, 223790, 42541, 175445, 91092, 216671, 328317, 263319, 322387, 141138, 27248, 188702, 217885,
      370859, 269724, 266357, 194861, 225937, 384341, 280672, 186441, 37132, 331561, 394056, 91744, 16313, 86293,
      364265, 336825, 92806, 376781, 261221, 22595, 211198, 185015, 235640, 397492, 352820, 315479, 72999, 305818,
      216543, 168146)

    @Benchmark
    def findInGraph4() = {
      for (nid <- randomNodes) {
        nid -> graph.edgesForVertexId(nid)
      }
    }
  }

  @State(Scope.Thread)
  @BenchmarkMode(Array(Mode.AverageTime))
  @OutputTimeUnit(TimeUnit.MILLISECONDS)
  class FindEdgesCSRMapAmazon {

    val graph = CSRMapType.readG("realdata/amazon0601.txt", "\\t", 3387392)

    val randomNodes = List(210940, 222098, 318973, 390521, 19551, 46446, 214411, 48226, 131686, 371249, 227972, 108566, 79333, 61635,
      109880, 301046, 347084, 97054, 346597, 184543, 290259, 205864, 286638, 56992, 308234, 134572, 120699, 55243,
      284250, 323167, 263489, 134137, 272005, 386528, 394005, 61292, 253212, 147700, 267535, 379626, 44379, 228191,
      335106, 32511, 197913, 358228, 70006, 350947, 218524, 178795, 107807, 174229, 319205, 347066, 325433, 112571,
      298734, 392140, 223790, 42541, 175445, 91092, 216671, 328317, 263319, 322387, 141138, 27248, 188702, 217885,
      370859, 269724, 266357, 194861, 225937, 384341, 280672, 186441, 37132, 331561, 394056, 91744, 16313, 86293,
      364265, 336825, 92806, 376781, 261221, 22595, 211198, 185015, 235640, 397492, 352820, 315479, 72999, 305818,
      216543, 168146)

    @Benchmark
    def findInGraph5() = {
      for (nid <- randomNodes) {
        nid -> graph.edgesForVertexId(nid)
      }
    }
  }

  @State(Scope.Thread)
  @BenchmarkMode(Array(Mode.AverageTime))
  @OutputTimeUnit(TimeUnit.MILLISECONDS)
  class FindEdgesCSRTreeAmazon {
    val graph = CSRTreeType.readG("realdata/amazon0601.txt", "\\t", 3387392)

    val randomNodes = List(210940, 222098, 318973, 390521, 19551, 46446, 214411, 48226, 131686, 371249, 227972, 108566, 79333, 61635,
      109880, 301046, 347084, 97054, 346597, 184543, 290259, 205864, 286638, 56992, 308234, 134572, 120699, 55243,
      284250, 323167, 263489, 134137, 272005, 386528, 394005, 61292, 253212, 147700, 267535, 379626, 44379, 228191,
      335106, 32511, 197913, 358228, 70006, 350947, 218524, 178795, 107807, 174229, 319205, 347066, 325433, 112571,
      298734, 392140, 223790, 42541, 175445, 91092, 216671, 328317, 263319, 322387, 141138, 27248, 188702, 217885,
      370859, 269724, 266357, 194861, 225937, 384341, 280672, 186441, 37132, 331561, 394056, 91744, 16313, 86293,
      364265, 336825, 92806, 376781, 261221, 22595, 211198, 185015, 235640, 397492, 352820, 315479, 72999, 305818,
      216543, 168146)

    @Benchmark
    def findInGraph6() = {
      for (nid <- randomNodes) {
        nid -> graph.edgesForVertexId(nid)
      }
    }
  }

}
